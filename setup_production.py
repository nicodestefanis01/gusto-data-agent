#!/usr/bin/env python3
"""
Production Setup Script for Gusto Data Agent
===========================================
Helps configure environment variables for Redshift and OpenAI
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create or update .env file with user input"""
    
    print("🚀 Gusto Data Agent - Production Setup")
    print("=" * 50)
    
    env_file = Path(".env")
    existing_vars = {}
    
    # Read existing .env if it exists
    if env_file.exists():
        print("📄 Found existing .env file, will update it...")
        with open(env_file) as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    existing_vars[key] = value
    
    print("\n🔐 OpenAI Configuration")
    print("-" * 25)
    current_openai = existing_vars.get('OPENAI_API_KEY', '')
    if current_openai and not current_openai.startswith('your_'):
        print(f"✅ OpenAI API key already configured: {current_openai[:20]}...")
        update_openai = input("Update OpenAI API key? (y/N): ").lower() == 'y'
    else:
        update_openai = True
    
    if update_openai:
        openai_key = input("Enter your OpenAI API key (starts with sk-...): ").strip()
        if openai_key:
            existing_vars['OPENAI_API_KEY'] = openai_key
        else:
            print("⚠️  Skipping OpenAI configuration")
    
    print("\n🗄️  Redshift Database Configuration")
    print("-" * 35)
    print("Contact your Gusto data team for these credentials:")
    
    redshift_fields = [
        ('REDSHIFT_HOST', 'Redshift Host (e.g., gusto-warehouse.amazonaws.com)'),
        ('REDSHIFT_DATABASE', 'Database Name (e.g., warehouse)'),
        ('REDSHIFT_USERNAME', 'Username'),
        ('REDSHIFT_PASSWORD', 'Password'),
        ('REDSHIFT_PORT', 'Port (default: 5439)')
    ]
    
    for env_key, description in redshift_fields:
        current_value = existing_vars.get(env_key, '')
        if current_value and not current_value.startswith('your_'):
            if env_key == 'REDSHIFT_PASSWORD':
                display_value = '*' * len(current_value)
            else:
                display_value = current_value
            print(f"✅ {env_key}: {display_value}")
            update = input(f"Update {env_key}? (y/N): ").lower() == 'y'
        else:
            update = True
        
        if update:
            if env_key == 'REDSHIFT_PORT':
                value = input(f"{description}: ") or "5439"
            else:
                value = input(f"{description}: ").strip()
            
            if value:
                existing_vars[env_key] = value
            else:
                print(f"⚠️  Skipping {env_key}")
    
    # Write .env file
    print(f"\n💾 Writing configuration to {env_file}...")
    with open(env_file, 'w') as f:
        f.write("# Gusto Data Agent - Production Configuration\n")
        f.write("# Generated by setup_production.py\n\n")
        
        f.write("# OpenAI Configuration\n")
        f.write(f"OPENAI_API_KEY={existing_vars.get('OPENAI_API_KEY', 'your_openai_api_key_here')}\n\n")
        
        f.write("# Redshift Database Configuration\n")
        for env_key, _ in redshift_fields:
            default_value = f"your_{env_key.lower()}_here" if env_key != 'REDSHIFT_PORT' else '5439'
            f.write(f"{env_key}={existing_vars.get(env_key, default_value)}\n")
        
        f.write("\n# Optional: Additional Settings\n")
        f.write("SQL_AGENT_LOG_LEVEL=INFO\n")
        f.write("SQL_AGENT_MAX_ROWS=10000\n")
    
    print("✅ Configuration saved!")
    
    # Check what's configured
    print("\n📊 Configuration Status:")
    has_openai = existing_vars.get('OPENAI_API_KEY', '').startswith('sk-')
    has_redshift = all(
        existing_vars.get(key, '').strip() and not existing_vars.get(key, '').startswith('your_')
        for key, _ in redshift_fields
    )
    
    if has_openai:
        print("✅ OpenAI: Configured")
    else:
        print("❌ OpenAI: Not configured")
    
    if has_redshift:
        print("✅ Redshift: Configured")
    else:
        print("❌ Redshift: Not configured")
    
    if has_openai and has_redshift:
        print("\n🎉 Ready for production mode!")
    elif has_openai or has_redshift:
        print("\n⚠️  Partial configuration - app will run in hybrid mode")
    else:
        print("\n🎮 No credentials configured - app will run in demo mode")
    
    return existing_vars

def test_configuration():
    """Test the current configuration"""
    print("\n🧪 Testing Configuration...")
    
    # Test OpenAI
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key and openai_key.startswith('sk-'):
        try:
            from openai import OpenAI
            client = OpenAI(api_key=openai_key)
            # Simple test
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": "Hello"}],
                max_tokens=5
            )
            print("✅ OpenAI: Connection successful")
        except Exception as e:
            print(f"❌ OpenAI: Connection failed - {e}")
    else:
        print("⚠️ OpenAI: No valid API key configured")
    
    # Test Redshift (connection only, no query)
    redshift_vars = ['REDSHIFT_HOST', 'REDSHIFT_DATABASE', 'REDSHIFT_USERNAME', 'REDSHIFT_PASSWORD']
    if all(os.getenv(var) for var in redshift_vars):
        try:
            import psycopg2
            conn = psycopg2.connect(
                host=os.getenv('REDSHIFT_HOST'),
                database=os.getenv('REDSHIFT_DATABASE'),
                user=os.getenv('REDSHIFT_USERNAME'),
                password=os.getenv('REDSHIFT_PASSWORD'),
                port=int(os.getenv('REDSHIFT_PORT', 5439)),
                connect_timeout=10
            )
            conn.close()
            print("✅ Redshift: Connection successful")
        except Exception as e:
            print(f"❌ Redshift: Connection failed - {e}")
    else:
        print("⚠️ Redshift: Credentials not configured")

def main():
    """Main setup function"""
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        # Load environment from .env file
        env_file = Path(".env")
        if env_file.exists():
            with open(env_file) as f:
                for line in f:
                    if '=' in line and not line.strip().startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value
        test_configuration()
        return
    
    # Interactive setup
    config = create_env_file()
    
    print(f"\n🚀 Next Steps:")
    print("1. Run the app: python -m streamlit run app.py")
    print("2. Test configuration: python setup_production.py test")
    print("3. Check the sidebar in the app to see connection status")
    
    # Ask about getting Redshift credentials
    if not any(config.get(f'REDSHIFT_{key}', '').strip() and 
               not config.get(f'REDSHIFT_{key}', '').startswith('your_') 
               for key in ['HOST', 'DATABASE', 'USERNAME', 'PASSWORD']):
        print(f"\n📞 To get Redshift credentials:")
        print("• Contact the Gusto Data Team")
        print("• Ask for read-only warehouse access")
        print("• Request connection details for the main warehouse cluster")
        print("• Mention you're building a SQL agent for ad-hoc analysis")

if __name__ == "__main__":
    main() 